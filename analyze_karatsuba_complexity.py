#!/usr/bin/env python3
"""
Script para analisar a complexidade ciclom√°tica do algoritmo de Karatsuba
usando o projeto CyclomaticComplex.
"""

import sys
import os

# Adicionar o diret√≥rio CyclomaticComplex ao path
sys.path.append(os.path.join(os.path.dirname(__file__), "CyclomaticComplex"))

# Importar do projeto CyclomaticComplex
from CyclomaticComplex.main import measure_complexity, calculate_cyclomatic_complexity
import inspect


def analyze_karatsuba_complexity():
    """
    Analisa a complexidade ciclom√°tica do algoritmo de Karatsuba.
    """
    print("=== AN√ÅLISE DA COMPLEXIDADE CICLOM√ÅTICA - ALGORITMO DE KARATSUBA ===\n")

    # Importar as fun√ß√µes do nosso algoritmo
    from main import karatsuba_multiply, traditional_multiply, compare_algorithms

    # Fun√ß√µes para an√°lise
    functions_to_analyze = [
        ("karatsuba_multiply", karatsuba_multiply),
        ("traditional_multiply", traditional_multiply),
        ("compare_algorithms", compare_algorithms),
    ]

    print("üìä AN√ÅLISE DETALHADA DA COMPLEXIDADE CICLOM√ÅTICA\n")

    for func_name, func in functions_to_analyze:
        print(f"üîç Analisando fun√ß√£o: {func_name}")

        # Obter o c√≥digo fonte
        try:
            source_code = inspect.getsource(func)
            complexity = measure_complexity(func)

            print(f"   üìà Complexidade Ciclom√°tica: {complexity}")

            # An√°lise detalhada do c√≥digo
            print(f"   üìù C√≥digo fonte:")
            print("   " + "=" * 50)

            # Mostrar o c√≥digo com numera√ß√£o de linhas
            lines = source_code.split("\n")
            for i, line in enumerate(lines, 1):
                if line.strip():  # S√≥ mostrar linhas n√£o vazias
                    print(f"   {i:2d}: {line}")

            print("   " + "=" * 50)

            # Interpreta√ß√£o da complexidade
            if complexity <= 3:
                interpretation = "Baixa - C√≥digo simples e f√°cil de manter"
            elif complexity <= 7:
                interpretation = "M√©dia - C√≥digo moderadamente complexo"
            elif complexity <= 15:
                interpretation = "Alta - C√≥digo complexo, requer aten√ß√£o"
            else:
                interpretation = (
                    "Muito alta - C√≥digo muito complexo, considere refatorar"
                )

            print(f"   üí° Interpreta√ß√£o: {interpretation}")

        except Exception as e:
            print(f"   ‚ùå Erro ao analisar: {e}")

        print()

    # An√°lise espec√≠fica do algoritmo de Karatsuba
    print("üéØ AN√ÅLISE ESPEC√çFICA DO ALGORITMO DE KARATSUBA\n")

    karatsuba_source = inspect.getsource(karatsuba_multiply)
    karatsuba_complexity = measure_complexity(karatsuba_multiply)

    print(f"üìä Complexidade Ciclom√°tica Total: {karatsuba_complexity}")
    print(f"üîç An√°lise do fluxo de controle:")

    # Contar estruturas de controle espec√≠ficas
    if_count = karatsuba_source.count("if ")
    return_count = karatsuba_source.count("return ")
    recursive_calls = karatsuba_source.count("karatsuba_multiply(")

    print(f"   ‚Ä¢ Estruturas condicionais (if): {if_count}")
    print(f"   ‚Ä¢ Pontos de retorno: {return_count}")
    print(f"   ‚Ä¢ Chamadas recursivas: {recursive_calls}")

    # An√°lise dos caminhos de execu√ß√£o
    print(f"\nüõ§Ô∏è  CAMINHOS DE EXECU√á√ÉO POSS√çVEIS:")
    print(f"   ‚Ä¢ Caminho base (caso simples): 1")
    print(f"   ‚Ä¢ Caminhos condicionais: {if_count}")
    print(f"   ‚Ä¢ Total de caminhos: {karatsuba_complexity}")

    # Compara√ß√£o com outros algoritmos
    print(f"\nüìä COMPARA√á√ÉO COM OUTROS ALGORITMOS:")
    print(f"   ‚Ä¢ Algoritmo de Karatsuba: {karatsuba_complexity}")
    print(f"   ‚Ä¢ Multiplica√ß√£o tradicional: {measure_complexity(traditional_multiply)}")

    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    if karatsuba_complexity <= 5:
        print("   ‚úÖ Complexidade aceit√°vel para um algoritmo recursivo")
    elif karatsuba_complexity <= 10:
        print("   ‚ö†Ô∏è  Complexidade moderada, mas aceit√°vel para este tipo de algoritmo")
    else:
        print("   üî¥ Complexidade alta, considere simplificar o algoritmo")

    print(f"\n   üìö Para algoritmos de multiplica√ß√£o:")
    print(f"      ‚Ä¢ Complexidade < 5: Excelente")
    print(f"      ‚Ä¢ Complexidade 5-10: Boa")
    print(f"      ‚Ä¢ Complexidade > 10: Pode ser melhorada")

    return karatsuba_complexity


def main():
    """
    Fun√ß√£o principal.
    """
    try:
        complexity = analyze_karatsuba_complexity()

        print("\n" + "=" * 60)
        print("üéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print(f"üìä Complexidade Ciclom√°tica do Algoritmo de Karatsuba: {complexity}")
        print("=" * 60)

        # Salvar resultado em arquivo
        with open(
            "exports/karatsuba_complexity_analysis.txt", "w", encoding="utf-8"
        ) as f:
            f.write(
                f"Complexidade Ciclom√°tica do Algoritmo de Karatsuba: {complexity}\n"
            )
            f.write(
                "Data da an√°lise: " + str(__import__("datetime").datetime.now()) + "\n"
            )

        print(f"\nüíæ Resultado salvo em: exports/karatsuba_complexity_analysis.txt")

    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {e}")
        print("Verifique se o projeto CyclomaticComplex est√° configurado corretamente.")


if __name__ == "__main__":
    main()
