#!/usr/bin/env python3
"""
Script para analisar a complexidade Big-O do algoritmo de Karatsuba
usando o projeto BigOComplex.
"""

import sys
import os
import time
import random

# Adicionar o diret√≥rio BigOComplex ao path
sys.path.append(os.path.join(os.path.dirname(__file__), "BigOComplex"))

try:
    from BigOComplex.main import measure_complexity
    from BigOComplex.wrapper import *

    print("‚úÖ Projeto BigOComplex carregado com sucesso!")
except ImportError as e:
    print(f"‚ùå Erro ao importar BigOComplex: {e}")
    print("Verifique se o projeto BigOComplex est√° configurado corretamente.")
    sys.exit(1)


def create_karatsuba_wrapper():
    """
    Cria um wrapper para o algoritmo de Karatsuba que seja compat√≠vel com o BigO Calculator.
    """
    from main import karatsuba_multiply

    def karatsuba_wrapper(arr):
        """
        Wrapper para o algoritmo de Karatsuba.
        Multiplica dois n√∫meros aleat√≥rios baseados no tamanho do array.
        """
        if len(arr) < 2:
            return [0]

        # Gerar dois n√∫meros com base no tamanho do array
        # Para n√∫meros maiores, o algoritmo ser√° mais lento
        size = len(arr)
        # Limitar o n√∫mero de d√≠gitos para evitar erros de limite
        max_digits = min(max(1, size // 20), 100)  # M√°ximo de 100 d√≠gitos

        # Gerar n√∫meros com o n√∫mero especificado de d√≠gitos
        x = random.randint(10 ** (max_digits - 1), 10**max_digits - 1)
        y = random.randint(10 ** (max_digits - 1), 10**max_digits - 1)

        # Executar o algoritmo de Karatsuba
        result = karatsuba_multiply(x, y)
        return [result]

    return karatsuba_wrapper


def create_traditional_wrapper():
    """
    Cria um wrapper para a multiplica√ß√£o tradicional.
    """
    from main import traditional_multiply

    def traditional_wrapper(arr):
        """
        Wrapper para a multiplica√ß√£o tradicional.
        """
        if len(arr) < 2:
            return [0]

        size = len(arr)
        # Limitar o n√∫mero de d√≠gitos para evitar erros de limite
        max_digits = min(max(1, size // 20), 100)  # M√°ximo de 100 d√≠gitos

        x = random.randint(10 ** (max_digits - 1), 10**max_digits - 1)
        y = random.randint(10 ** (max_digits - 1), 10**max_digits - 1)

        result = traditional_multiply(x, y)
        return [result]

    return traditional_wrapper


def analyze_karatsuba_bigO():
    """
    Analisa a complexidade Big-O do algoritmo de Karatsuba.
    """
    print("=== AN√ÅLISE DA COMPLEXIDADE BIG-O - ALGORITMO DE KARATSUBA ===\n")

    # Criar wrappers para nossos algoritmos
    karatsuba_wrapper = create_karatsuba_wrapper()
    traditional_wrapper = create_traditional_wrapper()

    # Fun√ß√µes para an√°lise
    functions_to_analyze = [
        ("karatsuba_multiply", karatsuba_wrapper),
        ("traditional_multiply", traditional_wrapper),
        ("binary_search_wrapper", binary_search_wrapper),
        ("linear_search_wrapper", linear_search_wrapper),
        ("merge_sort", merge_sort),
        ("bubble_sort", bubble_sort),
    ]

    print("üìä AN√ÅLISE DA COMPLEXIDADE BIG-O\n")

    results = {}

    for func_name, func in functions_to_analyze:
        print(f"üîç Analisando fun√ß√£o: {func_name}")

        try:
            # Medir a complexidade usando o BigO Calculator
            complexity = measure_complexity(func)
            results[func_name] = complexity

            print(f"   üìà Complexidade Big-O: {complexity}")

            # An√°lise espec√≠fica para nossos algoritmos
            if func_name in ["karatsuba_multiply", "traditional_multiply"]:
                if "log" in str(complexity) or "1.585" in str(complexity):
                    interpretation = (
                        "‚úÖ Complexidade logar√≠tmica - Excelente para n√∫meros grandes!"
                    )
                elif "n^2" in str(complexity) or "n¬≤" in str(complexity):
                    interpretation = "‚ö†Ô∏è  Complexidade quadr√°tica - Pode ser melhorada"
                elif "n" in str(complexity) and "log" not in str(complexity):
                    interpretation = (
                        "üîÑ Complexidade linear - Boa para n√∫meros pequenos"
                    )
                else:
                    interpretation = (
                        "üîç Complexidade espec√≠fica - Requer an√°lise detalhada"
                    )

                print(f"   üí° Interpreta√ß√£o: {interpretation}")

        except Exception as e:
            print(f"   ‚ùå Erro ao analisar: {e}")
            results[func_name] = "Erro"

        print()

    # An√°lise comparativa espec√≠fica
    print("üéØ AN√ÅLISE COMPARATIVA DOS ALGORITMOS DE MULTIPLICA√á√ÉO\n")

    karatsuba_complexity = results.get("karatsuba_multiply", "N/A")
    traditional_complexity = results.get("traditional_multiply", "N/A")

    print(f"üìä Resultados da An√°lise:")
    print(f"   ‚Ä¢ Algoritmo de Karatsuba: {karatsuba_complexity}")
    print(f"   ‚Ä¢ Multiplica√ß√£o tradicional: {traditional_complexity}")

    # Compara√ß√£o te√≥rica vs pr√°tica
    print(f"\nüìö COMPARA√á√ÉO TE√ìRICA vs PR√ÅTICA:")
    print(f"   ‚Ä¢ Te√≥rico - Karatsuba: O(n^log‚ÇÇ3) ‚âà O(n^1.585)")
    print(f"   ‚Ä¢ Te√≥rico - Tradicional: O(n¬≤)")
    print(f"   ‚Ä¢ Pr√°tico - Karatsuba: {karatsuba_complexity}")
    print(f"   ‚Ä¢ Pr√°tico - Tradicional: {traditional_complexity}")

    # An√°lise de efici√™ncia
    print(f"\n‚ö° AN√ÅLISE DE EFICI√äNCIA:")

    if "karatsuba_multiply" in results and "traditional_multiply" in results:
        karatsuba = str(results["karatsuba_multiply"])
        traditional = str(results["traditional_multiply"])

        if "log" in karatsuba.lower() or "1.585" in karatsuba:
            print("   üöÄ Karatsuba mostra complexidade logar√≠tmica - Excelente!")
        elif "n^2" in traditional.lower() or "n¬≤" in traditional:
            print("   ‚ö†Ô∏è  Multiplica√ß√£o tradicional mostra complexidade quadr√°tica")

        # Comparar com outros algoritmos
        if "merge_sort" in results:
            merge_complexity = results["merge_sort"]
            print(f"   üìä Merge Sort: {merge_complexity} (para compara√ß√£o)")

        if "bubble_sort" in results:
            bubble_complexity = results["bubble_sort"]
            print(f"   üìä Bubble Sort: {bubble_complexity} (para compara√ß√£o)")

    # Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    print(f"   ‚Ä¢ Para n√∫meros pequenos (< 10 d√≠gitos): Use multiplica√ß√£o tradicional")
    print(f"   ‚Ä¢ Para n√∫meros grandes (> 100 d√≠gitos): Use algoritmo de Karatsuba")
    print(
        f"   ‚Ä¢ Para n√∫meros muito grandes (> 1000 d√≠gitos): Considere algoritmos mais avan√ßados"
    )

    return results


def benchmark_performance():
    """
    Executa um benchmark de performance para validar os resultados.
    """
    print("\n" + "=" * 60)
    print("üèÉ BENCHMARK DE PERFORMANCE")
    print("=" * 60)

    from main import karatsuba_multiply, traditional_multiply

    # Testar com n√∫meros de diferentes tamanhos
    test_cases = [
        (123, 456, "Pequenos (3 d√≠gitos)"),
        (12345, 67890, "M√©dios (5 d√≠gitos)"),
        (123456789, 987654321, "Grandes (9 d√≠gitos)"),
        (12345678901234567890, 98765432109876543210, "Muito grandes (20 d√≠gitos)"),
    ]

    for x, y, description in test_cases:
        print(f"\nüîç Testando: {description}")
        print(f"   N√∫meros: {x} √ó {y}")

        # Teste Karatsuba
        start_time = time.time()
        karatsuba_result = karatsuba_multiply(x, y)
        karatsuba_time = time.time() - start_time

        # Teste tradicional
        start_time = time.time()
        traditional_result = traditional_multiply(x, y)
        traditional_time = time.time() - start_time

        # Verificar se os resultados coincidem
        results_match = karatsuba_result == traditional_result

        print(f"   Resultado Karatsuba: {karatsuba_result}")
        print(f"   Resultado Tradicional: {traditional_result}")
        print(f"   Tempo Karatsuba: {karatsuba_time:.6f} segundos")
        print(f"   Tempo Tradicional: {traditional_time:.6f} segundos")
        print(f"   Resultados coincidem: {'‚úÖ Sim' if results_match else '‚ùå N√£o'}")

        if karatsuba_time > 0 and traditional_time > 0:
            if karatsuba_time < traditional_time:
                speedup = traditional_time / karatsuba_time
                print(f"   üöÄ Karatsuba foi {speedup:.2f}x mais r√°pido!")
            else:
                slowdown = karatsuba_time / traditional_time
                print(f"   üêå Karatsuba foi {slowdown:.2f}x mais lento")


def main():
    """
    Fun√ß√£o principal.
    """
    try:
        print(
            "üöÄ Iniciando an√°lise da complexidade Big-O do algoritmo de Karatsuba...\n"
        )

        # Analisar complexidade Big-O
        results = analyze_karatsuba_bigO()

        # Executar benchmark de performance
        benchmark_performance()

        print("\n" + "=" * 60)
        print("üéâ AN√ÅLISE BIG-O CONCLU√çDA COM SUCESSO!")
        print("=" * 60)

        # Salvar resultados em arquivo
        with open("exports/karatsuba_bigO_analysis.txt", "w", encoding="utf-8") as f:
            f.write("AN√ÅLISE BIG-O - ALGORITMO DE KARATSUBA\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Data da an√°lise: {__import__('datetime').datetime.now()}\n\n")

            f.write("RESULTADOS DA AN√ÅLISE:\n")
            for func_name, complexity in results.items():
                f.write(f"  {func_name}: {complexity}\n")

            f.write(
                f"\nComplexidade do Algoritmo de Karatsuba: {results.get('karatsuba_multiply', 'N/A')}\n"
            )
            f.write(
                f"Complexidade da Multiplica√ß√£o Tradicional: {results.get('traditional_multiply', 'N/A')}\n"
            )

        print(f"\nüíæ Resultados salvos em: exports/karatsuba_bigO_analysis.txt")

    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {e}")
        print("Verifique se o projeto BigOComplex est√° configurado corretamente.")


if __name__ == "__main__":
    main()
